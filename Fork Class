Commands Terminal:

1: command cd   //   cd ~/Desktop/Fork\ Files
2: command touch  //  touch fork.c
3: command nano    //  nano fork.c
4: command clear      //   clear
5: command man     //   man (other command)  // Stands for manual
6: command gcc     //   gcc -o fork fork.c
7: command ./     //   ./fork

: command ps  //   ps 
: command ps -al  //   ps -al


Commands C file:

1: datatype pid_t  //  pid_t ret_value
2: %d   //  in printf we need to sepecify the datatype
3: command getpid()  // getpid()
4: fork    //    fork()
5: sleep    //  sleep (10)
6: kill    //   kill(ret_value, SIGTERM)  //   kill(pid, SIGSTOP)   //   kill(pid, SIGCONT)
7: wait     //   wait()
8: scanf   //   scanf("%d", &n)    Read integer datatype n name
9: scanf   //   scanf("%d%d", &a, &b)    Read 2 integer datatype a,b name


Code:

#include<stdio.h>
#include<unistd.h>
#include<signal.h>

int main()
{
pid_t ret_value;
printf("\nThe process id is %d\n",getpid());
ret_value = fork();
if (ret_value<0)
{
	//fork has failed
	printf("\nFork Failure\n");
}
else if (ret_value==0)
{
	//child process
	//Find if a number is even or odd.
	printf("\nChild Process\n");
	printf("The process id is %d\n",getpid());
	printf("The process id is %d\n",getpid());
	printf("ret_value: %d\n", ret_value);
	sleep(60);
}
else
{
	//parent process
	// Find the maximum between 2 numbers
	//wait();
	printf("Parent Process\n");
	printf("The process id is %d\n",getpid());
	printf("ret_value: %d\n", ret_value);
	//sleep(100);
	kill(ret_value, SIGTERM);
	//sleep(10);
}
return 0;
}

