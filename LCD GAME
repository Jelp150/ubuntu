// C++ code
//
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27,20,2);

byte playerChar[] = {
  B01110,
  B01010,
  B01110,
  B00100,
  B11111,
  B00100,
  B01010,
  B10001
};

char obs_char='|';
char space_char=' ';
char player_char;
char frame1[16];
char frame2[16];
int speed=1500;
int score=0;
 
void gameover()
{
    lcd.clear();
    lcd.print("Game Over.");
    delay(2000);
    lcd.noDisplay();
    lcd.noBacklight();
}

void display_menu()
{
  Serial.println("Press 'y' to start or 'z' to see the score.");
}

void setup()
{
  lcd.createChar(player_char, playerChar);
  randomSeed(analogRead(A0));
  int rand1=random(0,16);
  int rand2=random(0,2);
  for(int i=0; i<16;i++)
  {
    randomSeed(analogRead(A0));
    int rand3=random(0,2);
    int rand4=random(0,2);
    if(i==rand1 && rand2==1)
    {
      frame1[i]=player_char;
      frame2[i]=obs_char;
    }
    else if(i==rand1 && rand2==0)
    {
      frame1[i]=obs_char;
      frame2[i]=player_char;
    }
    else
    {
      if(rand3==0)
      {
        if(frame2[i-1]!=obs_char)
        {
        	frame1[i]=obs_char;
        }
        else
        {
          frame1[i]=space_char;
        }
      }
      else
      {
        frame1[i]=space_char;
      }
        if(rand4==0)
      {
        if(frame1[i-1]!=obs_char && frame1[i]!=obs_char)
        {
        	frame2[i]=obs_char;
        }
        else
        {
          frame2[i]=space_char;
        }
      }
      else
      {
        frame2[i]=space_char;
      }
  
    }
  }
  
  Serial.begin(9600);
  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("****JL Game****"); //message on lcd display
  Serial.println("Welcome to JL Game");
  display_menu();
  delay(2000);
  lcd.clear();
  lcd.print("Press y to Start");
  lcd.setCursor(0,1);
  lcd.print("*");
  lcd.setCursor(8,1);
  lcd.print("||  | |");
  lcd.blink(); 
  while(true)
  {
   if(Serial.read()=='y')
   {
     break;
   }
  }
  lcd.clear();
  lcd.noBlink();
}


void loop()
{
  lcd.createChar(player_char, playerChar);
  lcd.clear();
  for(int i=0; i<16;i++)
  {
      lcd.print(frame1[i]);
  }
  lcd.setCursor(0,1);
  for(int i=0; i<16;i++)
  {
      lcd.print(frame2[i]);
  }
  delay(speed);
  char user_option=Serial.read();
  switch(user_option)
  {
    case 'z':
    Serial.print("Your score is: ");
    Serial.println(score);
    break;
    case 'w':
    for(int i=0; i<16;i++)
    {
      if(frame1[i]==player_char)
      {
        break;
      }
      else if(frame2[i]==player_char)
        {
          if(frame1[i]==space_char)
          {
            frame1[i]=player_char;
            frame2[i]=space_char;
          }
          else
          {
			gameover();
          }
      }
    }
     break;
    case 'a':
    for(int i=0; i<16;i++)
    {
      if(frame1[0]==player_char||frame2[0]==player_char)
      {
        break;
      }
      else if(frame1[i]==player_char)
      {
        if(frame1[i-1]==space_char)
        {
        frame1[i-1]=player_char;
        frame1[i]=space_char;
        }
        else
        {
		  gameover();
        }
      }
      else if(frame2[i]==player_char)
      {
         if(frame2[i-1]==space_char)
        {
        frame2[i-1]=player_char;
        frame2[i]=space_char;
        }
        else
        {
		  gameover();
        }     
      }
    }
     break;
    case 's':
    for(int i=0; i<16;i++)
    {
      if(frame2[i]==player_char)
      {
        break;
      }
      else if(frame1[i]==player_char)
        
        {
          if(frame2[i]==space_char)
          {
            frame2[i]=player_char;
            frame1[i]=space_char;
          }
          else
          {
			gameover();
          }
      }
    }
     break;
    case 'd':
     for(int i=0; i<16;i++)
    {
      if(frame1[15]==player_char||frame2[15]==player_char)
      {
        break;
      }
      else if(frame1[i]==player_char)
      {
       	  if(frame1[i+1]==space_char)
          {
        	frame1[i+1]=player_char;
        	frame1[i]=space_char;
            break;
          }
       	  else 
          {
			gameover();
          }
      }
      else if(frame2[i]==player_char)
      {
        if(frame2[i+1]==space_char)
        {
        frame2[i+1]=player_char;
        frame2[i]=space_char;
        break;
        }
        else
        {
		  gameover();
        }     
      }
       else
       {
         continue;
       }
    }
     break;
    default:
    break;
  }
  if(speed>=140)
  {
    int random_value=random(0,2);
    if(random_value==0)
    {
    speed-=random(50,100);
    }
  }
  if(frame1[0]==obs_char)
  {
    frame1[0]=space_char;
  }
  else if(frame2[0]==obs_char)
  {
    frame2[0]=space_char;
  }
  for(int i=1;i<16;i++)
  {
    
    if(frame1[i]==obs_char)
    {
      if(frame1[i-1]==player_char)
      {
        gameover();
      }
      else
      {
    	frame1[i-1]=frame1[i];
        frame1[i]=space_char;
      }
    }
    else if (frame2[i]==obs_char)
    {
      if(frame2[i-1]==player_char)
      {
        gameover();
      }
      else
      {
          frame2[i-1]=frame2[i];
          frame2[i]=space_char;
      }
    }
  }
  int rand1=random(0,3);
  int rand2=random(0,3);
  if(rand1==0&&frame2[14]!=obs_char)
  {
   frame1[15]=obs_char;
   frame2[15]=space_char;
  }
  else if(rand2==0&&frame1[14]!=obs_char)
  {
   frame1[15]=space_char;
   frame2[15]=obs_char;
  }
  else
  {
   frame1[15]=space_char;
   frame2[15]=space_char;
  }
  score+=1;
}
