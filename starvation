#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/mman.h>
#include <signal.h>
#include <stdbool.h>
#include <sys/wait.h>

// Signal handler for SIGCONT
void sigcont_handler_parent(int signum) {
    // Print a message indicating that the SIGCONT signal was received
    printf("Parent process: Received SIGCONT signal\n");
}

void sigcont_handler_child(int signum) {
    // Print a message indicating that the SIGCONT signal was received
    printf("Child process: Received SIGCONT signal\n");
}

void sigcont_handler_unused(int signum) {
    // Print a message indicating that the SIGCONT signal was received
    printf("Unused process: Received SIGCONT signal\n");
}

int main() {
    int *shared_variable;  // Pointer to the shared variable

    // Create a shared memory region
    shared_variable = mmap(NULL, sizeof(int), PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, -1, 0);
    
    if (shared_variable == MAP_FAILED) {
        perror("mmap");
        exit(EXIT_FAILURE);
    }

    // Initialize shared variable
    *shared_variable = 2;

    // Fork a child process
    pid_t child_pid = fork();

    if (child_pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    } else if (child_pid == 0) {
        // Child process
        signal(SIGCONT, sigcont_handler_child);
        while (true) {
            // Child waits until shared_variable is 1
            while (*shared_variable == 0)
            {
            	sleep(1);
            }
            printf("Child process is currently executing...\n");
            sleep(1); 
        }
    } else {
        // Fork another process
        pid_t unused_pid = fork();
        
        if (unused_pid == -1) {
            perror("fork");
            exit(EXIT_FAILURE);
        } else if (unused_pid == 0) {
            // Unused process
            signal(SIGCONT, sigcont_handler_unused);
            while (true) {
            	while (*shared_variable == 0)
            	{
            		wait();
            	}
                printf("Unused process is currently executing...\n");
                sleep(5); 
            }
        } else {
            // Parent process
            signal(SIGCONT, sigcont_handler_parent);
            while (true) {
            	while (*shared_variable == 0)
            	{
                kill(unused_pid, SIGCONT);
            		sleep(10);
           	 }

            printf("Parent process is currently executing...\n");
            sleep(1);
            }
        }
    }

    return 0;
}
