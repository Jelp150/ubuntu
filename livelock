#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/mman.h>
#include <signal.h>

// Signal handler for SIGCONT
void sigcont_handler_parent(int signum) {
    // Print a message indicating that the SIGCONT signal was received
    printf("Parent process: Received SIGCONT signal\n");
}

void sigcont_handler_child(int signum) {
    // Print a message indicating that the SIGCONT signal was received
    printf("Child process: Received SIGCONT signal\n");
}

int main() {
    int *shared_variable1;  // Pointer to the shared variable
    int *shared_variable2;  // Pointer to the shared variable

    // Create a shared memory region
    shared_variable1 = mmap(NULL, sizeof(int), PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, -1, 0);
    shared_variable2 = mmap(NULL, sizeof(int), PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, -1, 0);
    
    *shared_variable1=0; 
    *shared_variable2=0; 

    if (shared_variable1 == MAP_FAILED || shared_variable2 == MAP_FAILED) {
        perror("mmap");
        exit(EXIT_FAILURE);
    }

    // Fork a child process
    pid_t child_pid = fork();

    if (child_pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    } else if (child_pid == 0) {
        // Child process
        signal(SIGCONT, sigcont_handler_child);
        while (*shared_variable1 == 1) {
            *shared_variable2 = 1;
            printf("Child process: Sending SIGCONT to parent\n");
            *shared_variable2 = 0;
            kill(getppid(), SIGCONT);
            sleep(10);
        }
    } else {
        // Parent process
        signal(SIGCONT, sigcont_handler_parent);
        while (*shared_variable2 == 0) {
            *shared_variable1 = 0;
            printf("Parent process: Sending SIGCONT to child\n");
            *shared_variable1 = 1;
            kill(child_pid, SIGCONT);
            sleep(10);
        }
    }

    return 0;
}
